package main

import (

	"io"
	"log"
	"net/http"
	"os/exec"
	"time"
	"bytes"
    "compress/gzip"
    "fmt"
    

)

func main() {
	mux := http.NewServeMux()
	
	// diciamogli in che formato vogliamo l'ora
	th := &timeHandler{format: time.RFC1123}

	//questo e' l'handler generico
	mux.HandleFunc("/", hello)
	// queste sono pericolose ma belle
	mux.Handle("/time", th)
	mux.HandleFunc("/psef", psef)
	mux.HandleFunc("/netstat", netstat)
	mux.HandleFunc("/ifconfig",ifconfig)
	mux.HandleFunc("/uptime",uptime)
	mux.HandleFunc("/disks",dfkh)
	mux.HandleFunc("/memory",memory)
	mux.HandleFunc("/syslog",syslog)
	mux.HandleFunc("/listen",listening)
	log.Printf("[INFO] %s","In ascolto su *:8080")

	http.ListenAndServe(":8080", mux)

}

//
//
//
// DA QUI INIZIANO LE FUNZIONI
//
//

type timeHandler struct {
	format string
}


// Stampa la pagina html , con header e footer. 
// la pagina e' presa dal gobin
func pagina(w http.ResponseWriter, r *http.Request, st string) {

	headr, err := assets_header_html()
	if err != nil {
		log.Fatal(err)
	}

	footr, err := assets_footer_html()
	if err != nil {
		log.Fatal(err)
	}

	hdr := string(headr[:])
	ftr := string(footr[:])

	io.WriteString(w, hdr)
	io.WriteString(w, st)
	io.WriteString(w, ftr)

}

func listening(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("netstat", "-ptnl").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

  pagina(w,r,s)


	log.Printf("[INFO] %s","Richieste porte e processi")

}

func psef(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("ps", "-ef").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

  pagina(w,r,s)


	log.Printf("[INFO] %s","Richiesto il ps -ef")

}

func memory(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("vmstat", "-s").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

  pagina(w,r,s)


	log.Printf("[INFO] %s","Richiesto il free")

}

func syslog(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("cat", "/var/log/syslog").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

  pagina(w,r,s)


	log.Printf("[INFO] %s","Richiesto il syslog")

}

func netstat(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("netstat", "-na").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

	pagina(w,r,s)

	log.Printf("[INFO] %s","Richiesto il netstat")

}

func dfkh(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("df", "-kh").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

	pagina(w,r,s)

	log.Printf("[INFO] %s","Richiesto il df kh")

}


func ifconfig(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("netstat", "-ie").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

	pagina(w,r,s)

	log.Printf("[INFO] %s","Richiesto l'ifconfig")

}

func uptime(w http.ResponseWriter, r *http.Request) {

	out, err := exec.Command("w").Output()
	if err != nil {
		log.Fatal(err)
	}
	s := string(out[:])

	pagina(w,r,s)

	log.Printf("[INFO] %s","Richiesto uptime")

}


func hello(w http.ResponseWriter, r *http.Request) {
	
	message, err := assets_messaggio_html()
	if err != nil {
		log.Fatal(err)
	}
	
	msg := string(message[:])
	
	io.WriteString(w, msg)
	

	log.Printf("[INFO] %s","Richiesta non gestita, pagina di aiuto")
}

func (th *timeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	tm := time.Now().Format(th.format)

	pagina(w,r,tm)

	log.Printf("[INFO] %s","Richiesta l'ora")
}

// THIS IS ONLY FOR STATIC HTML PAGES
// GENERATED WITH go-bindata


func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func assets_footer_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xe2, 0xb2,
		0xd1, 0x2f, 0x28, 0x4a, 0xb5, 0x03, 0x52, 0x49, 0x39, 0xf9, 0xc9, 0xd9,
		0x85, 0xa5, 0xf9, 0x25, 0x10, 0x5e, 0x7e, 0x4a, 0xa5, 0x1d, 0x17, 0x90,
		0x91, 0x51, 0x92, 0x9b, 0x63, 0xc7, 0x05, 0x08, 0x00, 0x00, 0xff, 0xff,
		0x1d, 0x03, 0xc3, 0xf3, 0x27, 0x00, 0x00, 0x00,
		},
		"assets/footer.html",
	)
}

func assets_header_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0x8e,
		0xb1, 0x52, 0xc3, 0x30, 0x10, 0x44, 0x7b, 0x7f, 0xc5, 0x11, 0x0a, 0x9a,
		0x78, 0x30, 0xad, 0x25, 0xd2, 0x04, 0x68, 0x61, 0x06, 0x1a, 0x4a, 0x59,
		0x3a, 0x25, 0x9a, 0x9c, 0x74, 0x42, 0x3a, 0x4d, 0xac, 0xbf, 0xc7, 0x03,
		0xa9, 0x76, 0xe7, 0xed, 0x16, 0x4f, 0xdf, 0xbd, 0xbc, 0x1f, 0xbf, 0xbe,
		0x3f, 0x5e, 0xe1, 0x2c, 0x91, 0x0e, 0x83, 0xbe, 0x85, 0x04, 0x21, 0x3c,
		0x7c, 0x62, 0x92, 0x90, 0x90, 0xc8, 0x3c, 0x54, 0x88, 0x6d, 0xd5, 0x8f,
		0xff, 0x7c, 0x18, 0xf4, 0xc2, 0xae, 0x6f, 0xbf, 0x85, 0xd8, 0x5e, 0x7e,
		0x1a, 0xcb, 0x06, 0x75, 0x2e, 0x08, 0x55, 0x3a, 0xe1, 0xf3, 0x6e, 0x31,
		0xf6, 0x72, 0x2a, 0xdc, 0x92, 0x1b, 0x2d, 0x13, 0x97, 0xf9, 0x7e, 0x9a,
		0x26, 0x05, 0xb7, 0xee, 0xbd, 0x57, 0xe0, 0x39, 0xc9, 0xe8, 0x4d, 0x0c,
		0xd4, 0xe7, 0xb7, 0xb0, 0xa2, 0xab, 0xbd, 0xee, 0x8f, 0xdc, 0x4a, 0xc0,
		0xb2, 0x8f, 0x9c, 0xb8, 0x66, 0x63, 0x51, 0x41, 0x36, 0xce, 0x85, 0x74,
		0x9a, 0x9f, 0xa6, 0xbc, 0x2a, 0xb8, 0x9e, 0x83, 0xe0, 0xf8, 0x37, 0xcd,
		0x70, 0x2d, 0x26, 0xab, 0xdd, 0xa6, 0xf3, 0x1b, 0x00, 0x00, 0xff, 0xff,
		0xe1, 0x72, 0x36, 0x7e, 0xc7, 0x00, 0x00, 0x00,
		},
		"assets/header.html",
	)
}

func assets_messaggio_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xc4, 0x56,
		0x61, 0x6f, 0xdb, 0x36, 0x10, 0xfd, 0x6c, 0xff, 0x8a, 0x0b, 0x07, 0xac,
		0x1b, 0x10, 0x85, 0xb2, 0xb3, 0x60, 0x4d, 0x2c, 0x09, 0x58, 0x9d, 0x14,
		0x1b, 0xe0, 0xad, 0x05, 0xea, 0x60, 0xd8, 0x47, 0x4a, 0x3a, 0xd9, 0x44,
		0x28, 0x52, 0x23, 0x29, 0xb7, 0xee, 0xb0, 0xff, 0x3e, 0x52, 0x94, 0x1d,
		0x7b, 0xae, 0xb1, 0x64, 0x31, 0xd0, 0x00, 0x81, 0x28, 0xf2, 0xde, 0xe3,
		0xdd, 0x7b, 0x94, 0x79, 0xc9, 0xd9, 0xed, 0xbb, 0xe9, 0xfc, 0x8f, 0xf7,
		0x77, 0xf0, 0xf3, 0xfc, 0xd7, 0x19, 0xbc, 0xbf, 0x7f, 0x33, 0xfb, 0x65,
		0x0a, 0x24, 0xa2, 0xf4, 0xf7, 0xcb, 0x29, 0xa5, 0xb7, 0xf3, 0xdb, 0xb0,
		0xf0, 0xc3, 0x45, 0x0c, 0x73, 0xcd, 0xa4, 0xe1, 0x96, 0x2b, 0xc9, 0x04,
		0xa5, 0x77, 0xbf, 0x91, 0x6c, 0x98, 0x2c, 0x6d, 0x2d, 0xfc, 0x03, 0x59,
		0x99, 0x0d, 0x07, 0x49, 0x8d, 0x96, 0xc1, 0xd2, 0xda, 0x26, 0xc2, 0x3f,
		0x5b, 0xbe, 0x4a, 0x49, 0xa1, 0xa4, 0x45, 0x69, 0x23, 0xbb, 0x6e, 0x90,
		0x40, 0xff, 0x96, 0x12, 0x8b, 0x9f, 0x2c, 0xf5, 0xd8, 0x09, 0x14, 0x4b,
		0xa6, 0x0d, 0xda, 0xb4, 0xb5, 0x55, 0xf4, 0x9a, 0x78, 0x12, 0xcb, 0xad,
		0xc0, 0xec, 0x03, 0x82, 0x54, 0x12, 0x6a, 0x0e, 0x25, 0x2f, 0xb8, 0x83,
		0x1a, 0x06, 0xab, 0x56, 0xf1, 0x6e, 0xb6, 0x51, 0xc6, 0x28, 0x28, 0x99,
		0xb6, 0x28, 0x14, 0x24, 0x34, 0x40, 0x36, 0x09, 0x48, 0x56, 0x63, 0x4a,
		0x16, 0x28, 0x51, 0x33, 0xab, 0xf4, 0xce, 0xbe, 0x33, 0x9e, 0x6b, 0x7c,
		0x57, 0x55, 0xbc, 0x40, 0x57, 0xd2, 0xf8, 0xe2, 0xc7, 0x8b, 0x31, 0x7c,
		0x37, 0xe3, 0xb2, 0xfd, 0xf4, 0x3d, 0xf9, 0x17, 0xbc, 0xd0, 0xc8, 0x2c,
		0x96, 0x3b, 0xe0, 0x78, 0x12, 0x1f, 0x04, 0x2d, 0x99, 0x5c, 0x60, 0x99,
		0xaf, 0x77, 0xc2, 0xee, 0x35, 0x47, 0x01, 0x6f, 0x99, 0x44, 0x21, 0xf8,
		0x11, 0xc0, 0x4e, 0xf8, 0x38, 0x1e, 0x5d, 0xc5, 0x97, 0xf1, 0x68, 0x32,
		0x1a, 0x8d, 0xe3, 0xab, 0xeb, 0xcb, 0xf1, 0x38, 0xbe, 0xbe, 0x76, 0x73,
		0x1d, 0xd2, 0xd8, 0xb5, 0x40, 0xf0, 0xe2, 0xf5, 0x9a, 0x15, 0xc6, 0x74,
		0x0b, 0x67, 0x51, 0x34, 0x1c, 0x0c, 0x1a, 0xf8, 0xcb, 0x11, 0x09, 0xa5,
		0x6f, 0xe0, 0x9b, 0xb8, 0xfb, 0x83, 0xbf, 0x87, 0x83, 0x28, 0xf2, 0x11,
		0xb4, 0xc3, 0x3a, 0x6f, 0x68, 0x30, 0x27, 0xc9, 0x55, 0xb9, 0x06, 0xe1,
		0xb6, 0x4f, 0x09, 0xca, 0xe8, 0xfe, 0x03, 0x01, 0xcf, 0x98, 0x92, 0x1e,
		0x49, 0x9c, 0xce, 0x3a, 0x25, 0xc2, 0x3a, 0xbd, 0x3a, 0x68, 0x4a, 0x72,
		0x56, 0x3c, 0x2c, 0xb4, 0x6a, 0x65, 0x79, 0x03, 0xd6, 0x9b, 0xdf, 0x30,
		0xed, 0x72, 0xf6, 0xbe, 0x37, 0x59, 0x52, 0xb9, 0x0a, 0xa0, 0x62, 0x85,
		0x0b, 0x7c, 0xc3, 0xad, 0xb1, 0x4e, 0xaf, 0x1a, 0xa6, 0x4b, 0xef, 0x89,
		0x3e, 0x07, 0x83, 0x9a, 0x57, 0xa4, 0x8f, 0x32, 0xfc, 0xb3, 0x8b, 0xba,
		0xda, 0x12, 0xfb, 0xc9, 0xc8, 0x4f, 0xde, 0xc0, 0xe8, 0x75, 0xe3, 0x08,
		0x93, 0x3c, 0x9b, 0x3b, 0xb9, 0x86, 0x35, 0xc2, 0xc7, 0x25, 0xb3, 0xb0,
		0x56, 0x2d, 0x7c, 0x64, 0xd2, 0x9e, 0x43, 0x23, 0x90, 0x19, 0x3c, 0x4b,
		0x68, 0x9e, 0x25, 0xd4, 0xe3, 0x1e, 0x1f, 0x4d, 0x97, 0xc7, 0xb7, 0x32,
		0x37, 0xcd, 0xe4, 0xcb, 0x6f, 0x4f, 0xcb, 0xf1, 0xa7, 0x15, 0xe3, 0x82,
		0xe5, 0x4e, 0xe8, 0x42, 0xd5, 0x35, 0x93, 0xa5, 0xb9, 0x81, 0x7e, 0x93,
		0x61, 0x60, 0x52, 0xc2, 0x2b, 0x2a, 0x78, 0xf6, 0x64, 0x4e, 0x89, 0x6e,
		0x85, 0xd9, 0x90, 0x4e, 0x24, 0x59, 0x18, 0x9c, 0x6f, 0xd2, 0x0b, 0x15,
		0x3c, 0x89, 0x89, 0x59, 0x6f, 0xe6, 0x33, 0x00, 0xfb, 0x7b, 0xb8, 0xcf,
		0x51, 0x63, 0x95, 0x12, 0xda, 0x67, 0xb4, 0xb1, 0xa4, 0x3b, 0x36, 0xbd,
		0xf9, 0xd5, 0xd6, 0xa8, 0xff, 0xb4, 0xb3, 0xcd, 0x36, 0x44, 0x09, 0x6d,
		0x0f, 0x1c, 0x61, 0x4e, 0xa6, 0x1d, 0x07, 0x9e, 0x27, 0x59, 0x63, 0x7a,
		0xb5, 0xb0, 0xda, 0x53, 0x8b, 0x3d, 0xab, 0xfa, 0x13, 0xa9, 0xd5, 0x18,
		0xac, 0x5e, 0x2e, 0x95, 0x67, 0x39, 0xa6, 0xd3, 0xe0, 0x7f, 0x48, 0xc4,
		0x2b, 0xf7, 0xb3, 0x51, 0xf1, 0x45, 0x2f, 0xd4, 0x89, 0x4e, 0xd5, 0xb6,
		0xe8, 0x0d, 0xfd, 0xd1, 0xc2, 0xdb, 0xad, 0x5c, 0x8f, 0x35, 0xbd, 0x50,
		0xa2, 0xcd, 0x9e, 0x27, 0x3f, 0x4e, 0x6d, 0x63, 0x79, 0x8d, 0x5f, 0xff,
		0xbb, 0x0b, 0x79, 0xbc, 0xfc, 0x2c, 0x05, 0x9e, 0x93, 0xcb, 0xe4, 0x1e,
		0x2b, 0xd4, 0xaf, 0x0c, 0x78, 0x76, 0x38, 0x87, 0x53, 0x95, 0x7d, 0x9a,
		0xa2, 0x8f, 0x97, 0xfc, 0x85, 0x82, 0xcb, 0x0a, 0xa2, 0x87, 0x65, 0x57,
		0x03, 0x3c, 0x26, 0x52, 0x72, 0xf3, 0xe0, 0xee, 0x4c, 0x08, 0x03, 0x0f,
		0xdd, 0x03, 0xd5, 0x58, 0x2b, 0xbd, 0x86, 0xd6, 0x72, 0xc1, 0x3f, 0x33,
		0xdf, 0xdc, 0x04, 0x82, 0x1d, 0x86, 0x10, 0x42, 0xb2, 0x7e, 0xe0, 0x29,
		0x60, 0xb8, 0xff, 0xf9, 0x9a, 0xb5, 0x11, 0x6a, 0x61, 0x1c, 0x52, 0x88,
		0x57, 0xd0, 0x6a, 0xb1, 0x03, 0x0f, 0x6b, 0x0e, 0x1e, 0x06, 0x07, 0x19,
		0x08, 0x6e, 0x5c, 0x27, 0xc0, 0xe5, 0x02, 0x82, 0x17, 0xe6, 0x20, 0x81,
		0x10, 0xe1, 0x18, 0xc2, 0x60, 0xcb, 0x90, 0x50, 0x7f, 0x31, 0x79, 0xab,
		0x5d, 0x3b, 0x70, 0x27, 0xcb, 0xb7, 0x9a, 0x2d, 0x6a, 0xdf, 0x6d, 0x45,
		0xee, 0x42, 0xd5, 0xdd, 0x7f, 0x7f, 0x81, 0x51, 0x7f, 0xf9, 0x77, 0xbd,
		0x40, 0xd7, 0xaf, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x02, 0x0c, 0x75,
		0xbb, 0xf6, 0x09, 0x00, 0x00,
		},
		"assets/messaggio.html",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"assets/footer.html": assets_footer_html,
	"assets/header.html": assets_header_html,
	"assets/messaggio.html": assets_messaggio_html,

}


